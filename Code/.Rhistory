base$role <-  factor(base$role, levels = c(0,1), labels = c("No", "Yes"))
base$re_elected <-  factor(base$re_elected, levels = c(0,1), labels = c("No", "Yes"))
base$rule <-  factor(base$rule, levels = c(0,1), labels = c("No", "Yes"))
base$party_affiliation <-  factor(base$party_affiliation, levels = c(0,1), labels = c("No", "Yes"))
base_b <- base %>%
mutate(pol_experience_std = as.numeric(scale(pol_experience)),
number_parties_std = as.numeric(scale(number_parties)),
age_std = as.numeric(scale(age)),
prop_votes_std = as.numeric(scale(prop_votes)))
base_b$party_discipline_adjusted <- ifelse(base_b$party_discipline == 1, 1 - 0.001, base_b$party_discipline)
summary(base_b$party_discipline_adjusted)
beta_model1 <- betareg(party_discipline_adjusted ~
party_affiliation,
data = base_b)
summary(beta_model1)
beta_model1 <- tidy(beta_model1)
coefs_1 <- beta_model1 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)")) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 1")
beta_model2 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender,
data = base_b)
summary(beta_model2)
beta_model2 <- tidy(beta_model2)
coefs_2 <- beta_model2 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)",
`genderMale` = "Gender (Male)")) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 2")
beta_model2
beta_model3 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected,
data = base_b)
summary(beta_model3)
beta_model3 <- tidy(beta_model3)
coefs_3 <- beta_model3 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)",
`genderMale` = "Gender (Male)",
`re_electedYes` = "Re-elected (Yes)")) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 3")
beta_model4 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role,
data = base_b)
summary(beta_model4)
beta_model4 <- tidy(beta_model4)
coefs_4 <- beta_model4 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)",
`genderMale` = "Gender (Male)",
`roleYes` = "Role (Yes)",
`re_electedYes` = "Re-elected (Yes)")) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 4")
beta_model5 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std,
data = base_b)
summary(beta_model5)
beta_model5 <- tidy(beta_model5)
coefs_5 <- beta_model5 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)",
`genderMale` = "Gender (Male)",
`roleYes` = "Role (Yes)",
`re_electedYes` = "Re-elected (Yes)",
`pol_experience_std` = "Political experience (Std)")) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 5")
beta_model6 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std +
age_std,
data = base_b)
summary(beta_model6)
beta_model6 <- tidy(beta_model6)
coefs_6 <- beta_model6 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)",
`genderMale` = "Gender (Male)",
`roleYes` = "Role (Yes)",
`re_electedYes` = "Re-elected (Yes)",
`pol_experience_std` = "Political experience (Std)",
`age_std` = "Age (Std)",)) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 6")
beta_model7 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std +
age_std +
prop_votes_std,
data = base_b)
summary(beta_model7)
beta_model7 <- tidy(beta_model7)
coefs_7 <- beta_model7 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)",
`genderMale` = "Gender (Male)",
`roleYes` = "Role (Yes)",
`re_electedYes` = "Re-elected (Yes)",
`age_std` = "Age (Std)",
`prop_votes_std` = "Proportion of votes (Std)",
`pol_experience_std` = "Political experience (Std)")) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 7")
beta_model8 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std +
age_std +
prop_votes_std +
rule,
data = base_b)
summary(beta_model8)
beta_model8 <- tidy(beta_model8)
coefs_8 <- beta_model8 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)",
`genderMale` = "Gender (Male)",
`roleYes` = "Role (Yes)",
`re_electedYes` = "Re-elected (Yes)",
`age_std` = "Age (Std)",
`prop_votes_std` = "Proportion of votes (Std)",
`ruleYes` = "Ruling party (Yes)",
`pol_experience_std` = "Political experience (Std)")) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 8")
coefs_8$term <- as.character(coefs_8$term)
desired_order <- c("Ruling party (Yes)",
"Proportion of votes (Std)",
"Age (Std)",
"Political experience (Std)",
"Role (Yes)",
"Re-elected (Yes)",
"Gender (Male)",
"Party affiliation (Yes)")
coefs_8$term <- factor(coefs_8$term, levels = desired_order)
pdf(paste0("model8.pdf"),
width = 6, height = 5)
ggplot(coefs_8,
aes(x = term, y = estimate, ymin = lwr, ymax = upr)) +
geom_pointrange(aes(alpha = same_sign, color = factor(same_sign)),
size = 0.5, show.legend = FALSE) +
geom_hline(yintercept = 0, color = "red") +
geom_text(aes(x = as.numeric(as.factor(term)) + 0.25, y = estimate,
label = paste0(round(estimate, 2), ifelse(same_sign == 1, "*", ""))),
color = "black", size = 3, show.legend = FALSE) +
facet_wrap(~ model, nrow = 1) +
coord_flip() +
scale_y_continuous("\nMarginal Effects of Predictors on Adjusted Party Discipline") +
scale_x_discrete("") +
scale_alpha_continuous(range = c(0.3, 1)) +
scale_color_manual(values = c("black", "black")) +
theme(panel.background = element_blank(),
# panel.grid.major = element_line(color = "gray", linetype = "dotted"),
panel.border = element_rect(color = "black", fill = NA),
axis.line = element_line(),
axis.ticks = element_blank(),
strip.background = element_rect(fill = "white"),
strip.text = element_text(face = "bold"),
axis.text.y = element_text(face = c(rep("plain", 7), rep("bold", 1))))
dev.off()
total <- rbind(coefs_1, coefs_2, coefs_3, coefs_4, coefs_5, coefs_6, coefs_7, coefs_8)
total$term <- as.character(total$term)
desired_order <- c("Ruling party (Yes)",
"Proportion of votes (Std)",
"Age (Std)",
"Political experience (Std)",
"Role (Yes)",
"Re-elected (Yes)",
"Gender (Male)",
"Party affiliation (Yes)")
total$term <- factor(total$term, levels = desired_order)
pdf(paste0("allmodels.pdf"),
width = 9, height = 8)
ggplot(total,
aes(x = term, y = estimate, ymin = lwr, ymax = upr)) +
geom_pointrange(aes(alpha = same_sign, color = factor(same_sign)),
size = 0.5, show.legend = FALSE) +
geom_hline(yintercept = 0, color = "red") +
geom_text(aes(x = as.numeric(as.factor(term)) + 0.4, y = estimate,
label = paste0(round(estimate, 2), ifelse(same_sign == 1, "*", ""))),
color = "black", size = 3, show.legend = FALSE) +
facet_wrap(~ model, nrow = 2) +
coord_flip() +
scale_y_continuous("\nMarginal Effects of Predictors on Adjusted Party Discipline") +
scale_x_discrete("") +
scale_alpha_continuous(range = c(0.3, 1)) +
scale_color_manual(values = c("black", "black")) +
theme(panel.background = element_blank(),
# panel.grid.major = element_line(color = "gray", linetype = "dotted"),
panel.border = element_rect(color = "black", fill = NA),
axis.line = element_line(),
axis.ticks = element_blank(),
strip.background = element_rect(fill = "white"),
strip.text = element_text(face = "bold"),
axis.text.y = element_text(face = c(rep("plain", 7), rep("bold", 1))))
dev.off()
beta_model1 <- betareg(party_discipline_adjusted ~
party_affiliation,
data = base_b)
beta_model2 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender,
data = base_b)
beta_model3 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected,
data = base_b)
beta_model4 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role,
data = base_b)
beta_model5 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std,
data = base_b)
beta_model6 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std +
age_std,
data = base_b)
beta_model7 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std +
age_std +
prop_votes_std,
data = base_b)
beta_model8 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std +
age_std +
prop_votes_std +
rule,
data = base_b)
library(betareg)
library(MASS)
library(xtable)
library(officer)
library(rvg)
library(kableExtra)
library(flextable)
aic_values <- AIC(beta_model8, beta_model1, beta_model2, beta_model3, beta_model4,
beta_model5, beta_model6, beta_model7)
bic_values <- BIC(beta_model8, beta_model1, beta_model2, beta_model3, beta_model4,
beta_model5, beta_model6, beta_model7)
aic_values$model <- rownames(aic_values)
rownames(aic_values) <- NULL
aic_values <- aic_values[,c(3,1,2)]
aic_values <- aic_values %>% mutate(model = dplyr::recode(model,
`beta_model8` = "Model 8 (full model)",
`beta_model1` = "Model 1",
`beta_model2` = "Model 2",
`beta_model3` = "Model 3",
`beta_model4` = "Model 4",
`beta_model5` = "Model 5",
`beta_model6` = "Model 6",
`beta_model7` = "Model 7"))
aic_values
bic_values$model <- rownames(bic_values)
rownames(bic_values) <- NULL
bic_values <- bic_values[,c(3,1,2)]
bic_values <- bic_values %>% mutate(model = dplyr::recode(model,
`beta_model8` = "Model 8 (full model)",
`beta_model1` = "Model 1",
`beta_model2` = "Model 2",
`beta_model3` = "Model 3",
`beta_model4` = "Model 4",
`beta_model5` = "Model 5",
`beta_model6` = "Model 6",
`beta_model7` = "Model 7"))
aic_values$BIC <- bic_values$BIC
aic_values$df <- NULL
colnames(aic_values)[1] ="Model"
aic_values
final_table <- aic_values
final_table
# Diagnostic plots
residualPlots(model)
# Diagnostic plots
residualPlots(beta_model8)
library(car)
# Diagnostic plots
residualPlots(beta_model8)
# Calculating residuals
residuals <- residuals(beta_model8)
residuals
# Residuals vs. Fitted plot
plot(predict(beta_model8, type = "response"), residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted")
# Normal Q-Q plot of residuals
qqnorm(residuals)
qqline(residuals)
# Normal Q-Q plot of residuals
qqnorm(residuals)
qqline(residuals)
# Calculate standardized residuals
std_residuals <- residuals(beta_model8) / sqrt(beta_model8$variance(beta_model8))
# Calculate standardized residuals
std_residuals <- residuals(beta_model8) / sqrt(beta_model8$variance(beta_model8))
# Calculate standardized residuals
std_residuals <- residuals(beta_model8)/sqrt(beta_model8$variance(beta_model8))
# Install and load the 'sandwich' package
install.packages("sandwich")
install.packages("sandwich")
install.packages("sandwich")
# Calculate the standardized residuals
matrix <- bread(beta_model8)
library(sandwich)
# Calculate the standardized residuals
bread <- bread(beta_model8)
std_residuals <- residuals(beta_model8) / sqrt(diag(bread))
std_residuals
# Scale-Location plot
plot(predict(beta_model8, type = "response"), sqrt(abs(std_residuals)),
xlab = "Fitted Values", ylab = "Square Root of Standardized Residuals",
main = "Scale-Location Plot")
# Residuals vs. Fitted plot
plot1 <- plot(predict(beta_model8, type = "response"), residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted")
plot1
plot1
# Residuals vs. Fitted plot
plot(predict(beta_model8, type = "response"), residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted")
# Residuals vs. Fitted plot
plot1 <- plot(predict(beta_model8, type = "response"), residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted")
plot2 <- qqnorm(residuals)
qqline(residuals)
# Scale-Location plot
plot3 <- plot(predict(beta_model8, type = "response"), sqrt(abs(std_residuals)),
xlab = "Fitted Values", ylab = "Square Root of Standardized Residuals",
main = "Scale-Location Plot")
# Create a layout for the combined plot
layout_matrix <- matrix(c(1, 2, 3), nrow = 1)
# Set up the layout
layout(layout_matrix)
# Plot the individual plots in the specified layout
plot1
plot2
plot3
# Reset the layout
layout(1)
layout_matrix
# Plot the individual plots in the specified layout
plot1
# Set up the layout
layout(layout_matrix)
# Plot the individual plots in the specified layout
plot1
plot1
install.packages("gridExtra")
library(gridExtra)
plot2
combined_plot <- grid.arrange(plot1, plot2, plot3, ncol = 3)
combined_plot
plot1 <- plot(predict(beta_model8, type = "response"), residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted")
plot2 <- qqnorm(residuals)
qqline(residuals)
plot3 <- plot(predict(beta_model8, type = "response"), sqrt(abs(std_residuals)),
xlab = "Fitted Values", ylab = "Square Root of Standardized Residuals",
main = "Scale-Location Plot")
combined_plot
# Reset the layout
layout(1)
# Cross-validation
library(caret)
# Cross-validation
install.packages("caret")
library(caret)
# Create a cross-validation wrapper for beta regression
ctrl <- trainControl(method = "cv", number = 10)  # 10-fold cross-validation
cv_model <- train(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std +
age_std +
prop_votes_std +
rule,
data = base_b, method = "betareg",
trControl = ctrl)
library(caret)
# Creating indices for cross-validation
set.seed(123)  # For reproducibility
folds <- createFolds(base_b$party_discipline_adjusted, k = 10)  # 10-fold cross-validation
folds
# An empty vector to store cross-validated predictions
cv_predictions <- rep(NA, nrow(base_b))
for (i in seq_along(folds)) {
# Training and testing datasets
train_indices <- unlist(folds[-i])
test_indices <- folds[[i]]
train_data <- base_b[train_indices, ]
test_data <- base_b[test_indices, ]
# Fit beta regression model on the training data
model <- betareg(party_discipline_adjusted ~ party_affiliation + gender + re_elected +
role + pol_experience_std + age_std + prop_votes_std + rule,
data = train_data)
# Predict on the testing data
cv_predictions[test_indices] <- predict(model, newdata = test_data, type = "response")
}
library(betareg)
for (i in seq_along(folds)) {
# Training and testing datasets
train_indices <- unlist(folds[-i])
test_indices <- folds[[i]]
train_data <- base_b[train_indices, ]
test_data <- base_b[test_indices, ]
# Fit beta regression model on the training data
model <- betareg(party_discipline_adjusted ~ party_affiliation + gender + re_elected +
role + pol_experience_std + age_std + prop_votes_std + rule,
data = train_data)
# Predict on the testing data
cv_predictions[test_indices] <- predict(model, newdata = test_data, type = "response")
}
# Calculate cross-validated MSE
cv_mse <- mean((cv_predictions - base_b$party_discipline_adjusted)^2)
cv_mse
summary(base_b$party_discipline_adjusted)
